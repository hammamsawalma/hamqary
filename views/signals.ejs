<% title = 'Trading Signals Dashboard' %>

<style>
    body { 
        background: linear-gradient(135deg, #1e3d5f 0%, #2c5aa0 100%);
        min-height: 100vh;
        color: #333;
    }
    .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
    
    /* Header */
    .header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    .header h1 {
        color: #2c3e50;
        font-size: 2.5em;
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .header p {
        color: #7f8c8d;
        font-size: 1.1em;
        margin-bottom: 20px;
    }
    
    /* Controls */
    .controls {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }
    .controls-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }
    .control-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    .control-group label {
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9em;
    }
    select, input, button {
        padding: 12px 16px;
        border: 2px solid #e1e8ed;
        border-radius: 10px;
        font-size: 1em;
        transition: all 0.3s ease;
    }
    select:focus, input:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }
    
    /* Buttons */
    .btn {
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        border: none;
    }
    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }
    .btn-primary:hover {
        background: linear-gradient(135deg, #2980b9, #1f3a93);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4);
    }
    .btn-success {
        background: linear-gradient(135deg, #27ae60, #229954);
        color: white;
    }
    .btn-danger {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }
    
    /* Statistics */
    .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .stat-card {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease;
    }
    .stat-card:hover {
        transform: translateY(-5px);
    }
    .stat-value {
        font-size: 2.5em;
        font-weight: 700;
        margin-bottom: 10px;
    }
    .stat-label {
        color: #7f8c8d;
        font-size: 0.9em;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    .stat-buy { color: #27ae60; }
    .stat-sell { color: #e74c3c; }
    .stat-high { color: #f39c12; }
    .stat-total { color: #3498db; }
    
    /* Signal Cards */
    .signals-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }
    .signal-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border-top: 4px solid;
    }
    .signal-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }
    .signal-card.buy { border-top-color: #27ae60; }
    .signal-card.sell { border-top-color: #e74c3c; }
    
    .signal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .signal-symbol {
        font-size: 1.4em;
        font-weight: 700;
        color: #2c3e50;
    }
    .signal-type {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
        text-transform: uppercase;
    }
    .signal-type.buy {
        background: linear-gradient(135deg, #d4edda, #c3e6cb);
        color: #155724;
    }
    .signal-type.sell {
        background: linear-gradient(135deg, #f8d7da, #f1c2c7);
        color: #721c24;
    }
    
    .signal-score {
        text-align: center;
        margin-bottom: 20px;
    }
    .score-value {
        font-size: 3em;
        font-weight: 700;
        background: linear-gradient(135deg, #f39c12, #e67e22);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    .score-label {
        color: #7f8c8d;
        font-size: 0.9em;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .signal-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 20px;
    }
    .detail-item {
        text-align: center;
        padding: 15px;
        background: rgba(248, 249, 250, 0.8);
        border-radius: 10px;
    }
    .detail-label {
        font-size: 0.8em;
        color: #7f8c8d;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 5px;
    }
    .detail-value {
        font-size: 1.1em;
        font-weight: 600;
        color: #2c3e50;
    }
    
    .signal-prices {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 10px;
        margin-bottom: 15px;
    }
    .price-item {
        text-align: center;
        padding: 10px;
        border-radius: 8px;
        font-size: 0.9em;
    }
    .price-item.poc {
        background: rgba(52, 152, 219, 0.1);
        color: #2980b9;
        font-weight: 700;
    }
    .price-item.vah {
        background: rgba(39, 174, 96, 0.1);
        color: #27ae60;
    }
    .price-item.val {
        background: rgba(231, 76, 60, 0.1);
        color: #e74c3c;
    }
    
    /* Stop Loss Section */
    .stop-loss-section {
        margin: 15px 0;
        padding: 15px;
        background: linear-gradient(135deg, rgba(231, 76, 60, 0.1), rgba(192, 57, 43, 0.05));
        border-radius: 10px;
        border-left: 4px solid #e74c3c;
    }
    .stop-loss-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }
    .stop-loss-item, .risk-item {
        text-align: center;
        padding: 12px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 8px;
    }
    .stop-loss-label, .risk-label {
        font-size: 0.8em;
        color: #e74c3c;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 5px;
        font-weight: 600;
    }
    .stop-loss-price {
        font-size: 1.1em;
        font-weight: 700;
        color: #c0392b;
        font-family: 'Courier New', monospace;
    }
    .risk-percentage {
        font-size: 1.2em;
        font-weight: 700;
        color: #e74c3c;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .signal-time {
        text-align: center;
        color: #7f8c8d;
        font-size: 0.9em;
        border-top: 1px solid #ecf0f1;
        padding-top: 15px;
    }
    
    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    .empty-state h3 {
        color: #2c3e50;
        font-size: 1.5em;
        margin-bottom: 15px;
    }
    .empty-state p {
        color: #7f8c8d;
        margin-bottom: 25px;
        line-height: 1.6;
    }
    
    /* Checkbox Dropdown */
    .dropdown-container {
        position: relative;
    }
    .dropdown-toggle {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e8ed;
        border-radius: 10px;
        background: white;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 1em;
        transition: all 0.3s ease;
    }
    .dropdown-toggle:hover, .dropdown-toggle.active {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }
    .dropdown-arrow {
        transition: transform 0.3s ease;
    }
    .dropdown-toggle.active .dropdown-arrow {
        transform: rotate(180deg);
    }
    .dropdown-menu {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 2px solid #e1e8ed;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: none;
        margin-top: 5px;
    }
    .dropdown-menu.show {
        display: block;
    }
    .dropdown-header {
        padding: 10px 15px;
        border-bottom: 1px solid #ecf0f1;
        display: flex;
        gap: 10px;
    }
    .btn-small {
        padding: 5px 12px;
        font-size: 0.8em;
        border: 1px solid #bdc3c7;
        border-radius: 5px;
        background: #f8f9fa;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .btn-small:hover {
        background: #e9ecef;
        border-color: #95a5a6;
    }
    .checkbox-list {
        max-height: 200px;
        overflow-y: auto;
        padding: 10px;
    }
    .checkbox-item {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.2s ease;
    }
    .checkbox-item:hover {
        background-color: #f8f9fa;
    }
    .checkbox-item input[type="checkbox"] {
        display: none;
    }
    .checkmark {
        width: 18px;
        height: 18px;
        border: 2px solid #bdc3c7;
        border-radius: 3px;
        margin-right: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }
    .checkbox-item input[type="checkbox"]:checked + .checkmark {
        background-color: #3498db;
        border-color: #3498db;
    }
    .checkbox-item input[type="checkbox"]:checked + .checkmark::after {
        content: '✓';
        color: white;
        font-size: 12px;
        font-weight: bold;
    }
    
    /* Delete Signal Button */
    .delete-signal-btn {
        background: none;
        border: none;
        font-size: 1.2em;
        cursor: pointer;
        padding: 5px 8px;
        border-radius: 6px;
        transition: all 0.2s ease;
        opacity: 0.6;
    }
    .delete-signal-btn:hover {
        background: rgba(231, 76, 60, 0.1);
        opacity: 1;
        transform: scale(1.1);
    }
    .delete-signal-btn:active {
        transform: scale(0.95);
    }
    
    /* Responsive */
    @media (max-width: 768px) {
        .container { padding: 15px; }
        .header h1 { font-size: 2em; }
        .signals-grid { grid-template-columns: 1fr; }
        .controls-grid { grid-template-columns: 1fr; }
    }
</style>

<!-- Header -->
<div class="header">
    <h1>
        🚀 Trading Signals Dashboard
    </h1>
    <p>Real-time volume profile trading signals with advanced scoring</p>
    
    <% if (!hasSymbols) { %>
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; border-left: 4px solid #f39c12;">
            <h4 style="color: #856404; margin-bottom: 10px;">📋 Get Started</h4>
            <p style="color: #856404; margin-bottom: 15px;">Select symbols to track before viewing signals</p>
            <a href="/symbols" class="btn btn-primary">Choose Symbols</a>
        </div>
    <% } %>
</div>

<% if (hasSymbols) { %>
    <!-- Controls -->
    <div class="controls">
        <form id="signalsForm" class="controls-grid">
            <div class="control-group">
                <label for="symbol">Symbol</label>
                <select name="symbol" id="symbol">
                    <option value="all" <%= currentSymbol === 'all' ? 'selected' : '' %>>All Symbols</option>
                    <% selectedSymbols.forEach(function(s) { %>
                        <option value="<%= s %>" <%= s === currentSymbol ? 'selected' : '' %>><%= s %></option>
                    <% }); %>
                </select>
            </div>
            
            <div class="control-group">
                <label>Timeframe Range</label>
                <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 8px; align-items: center;">
                    <input type="number" name="minTimeframe" id="minTimeframe" min="1" max="60" 
                           value="<%= currentMinTimeframe || 3 %>" placeholder="Min" 
                           style="text-align: center;">
                    <span style="color: #7f8c8d; font-weight: 600;">to</span>
                    <input type="number" name="maxTimeframe" id="maxTimeframe" min="1" max="60" 
                           value="<%= currentMaxTimeframe || 60 %>" placeholder="Max" 
                           style="text-align: center;">
                </div>
                <div style="text-align: center; font-size: 0.8em; color: #7f8c8d; margin-top: 5px;">
                    Range: <span id="rangeDisplay"><%= (currentMinTimeframe || 3) %>m - <%= (currentMaxTimeframe || 60) %>m</span>
                </div>
            </div>
            
            <div class="control-group">
                <label for="specificTimeframe">OR Specific</label>
                <input type="number" name="specificTimeframe" id="specificTimeframe" min="1" max="60" 
                       value="<%= currentSpecificTimeframe || '' %>" placeholder="e.g. 15" 
                       style="text-align: center;">
                <div style="text-align: center; font-size: 0.8em; color: #7f8c8d; margin-top: 5px;">
                    Leave empty for range
                </div>
            </div>
            
            <div class="control-group">
                <label for="minScore">Min Score</label>
                <input type="number" name="minScore" id="minScore" min="0" max="10" step="0.1" 
                       value="<%= currentMinScore %>" placeholder="0.0">
            </div>
            
            <div class="control-group">
                <label for="signalType">Signal Type</label>
                <select name="signalType" id="signalType">
                    <option value="both" <%= currentSignalType === 'both' ? 'selected' : '' %>>📊 Both</option>
                    <option value="buy" <%= currentSignalType === 'buy' ? 'selected' : '' %>>📈 Buy Only</option>
                    <option value="sell" <%= currentSignalType === 'sell' ? 'selected' : '' %>>📉 Sell Only</option>
                </select>
            </div>
            
            <div class="control-group">
                <label for="sortBy">Sort By</label>
                <select name="sortBy" id="sortBy">
                    <option value="closeTime" <%= currentSortBy === 'closeTime' ? 'selected' : '' %>>Newest First</option>
                    <option value="score" <%= currentSortBy === 'score' ? 'selected' : '' %>>Best Score</option>
                    <option value="symbol" <%= currentSortBy === 'symbol' ? 'selected' : '' %>>Symbol</option>
                </select>
            </div>
            
            <div class="control-group">
                <button type="button" id="refreshBtn" class="btn btn-success">
                    🔄 Refresh Data
                </button>
            </div>
            
            <div class="control-group">
                <a href="/symbols" class="btn btn-primary">
                    ⚙️ Manage Symbols
                </a>
            </div>
            
            <div class="control-group">
                <button type="button" id="resetSymbolsBtn" class="btn btn-danger">
                    ⚠️ Reset System
                </button>
            </div>
        </form>
    </div>
    
    <% if (statistics) { %>
        <!-- Statistics -->
        <div class="stats">
            <div class="stat-card">
                <div class="stat-value stat-total"><%= statistics.totalSignals %></div>
                <div class="stat-label">Total Signals</div>
            </div>
            <div class="stat-card">
                <div class="stat-value stat-buy"><%= statistics.buySignals %></div>
                <div class="stat-label">Buy Signals</div>
            </div>
            <div class="stat-card">
                <div class="stat-value stat-sell"><%= statistics.sellSignals %></div>
                <div class="stat-label">Sell Signals</div>
            </div>
            <div class="stat-card">
                <div class="stat-value stat-high"><%= statistics.highScoreSignals %></div>
                <div class="stat-label">High Score (8+)</div>
            </div>
            <div class="stat-card">
                <div class="stat-value"><%= statistics.avgScore %></div>
                <div class="stat-label">Average Score</div>
            </div>
        </div>
    <% } %>
<% } %>

<% if (error) { %>
    <div style="background: linear-gradient(135deg, #f8d7da, #f1c2c7); padding: 20px; border-radius: 10px; border-left: 4px solid #e74c3c; margin-bottom: 30px;">
        <h4 style="color: #721c24;">❌ Error</h4>
        <p style="color: #721c24;"><%= error %></p>
    </div>
<% } %>

<!-- Signals Grid -->
<% if (signals.length > 0) { %>
    <div class="signals-grid">
        <% signals.forEach(function(signal) { 
            const stopLoss = calculateStopLoss(signal);
        %>
            <div class="signal-card <%= signal.tradeSignal.signalType %>" data-signal-id="<%= signal._id %>">
                <div class="signal-header">
                    <div class="signal-symbol"><%= signal.symbol %></div>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <div class="signal-type <%= signal.tradeSignal.signalType %>">
                            <%= signal.tradeSignal.signalType === 'buy' ? '📈 BUY' : '📉 SELL' %>
                        </div>
                        <button class="delete-signal-btn" onclick="deleteSignal('<%= signal._id %>')" title="Delete this signal">
                            🗑️
                        </button>
                    </div>
                </div>
                
                <div class="signal-score">
                    <div class="score-value"><%= signal.tradeSignal.score %></div>
                    <div class="score-label">Signal Score</div>
                </div>
                
                <div class="signal-details">
                    <div class="detail-item">
                        <div class="detail-label">Timeframe</div>
                        <div class="detail-value"><%= signal.interval %></div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Volume</div>
                        <div class="detail-value"><%= signal.volumeFootprint.totalVolume.toLocaleString() %></div>
                    </div>
                </div>
                
                <div class="signal-prices">
                    <div class="price-item poc">
                        <div style="font-size: 0.8em; margin-bottom: 3px;">POC</div>
                        <div><%= signal.volumeFootprint.poc %></div>
                    </div>
                    <div class="price-item vah">
                        <div style="font-size: 0.8em; margin-bottom: 3px;">VAH</div>
                        <div><%= signal.volumeFootprint.vah %></div>
                    </div>
                    <div class="price-item val">
                        <div style="font-size: 0.8em; margin-bottom: 3px;">VAL</div>
                        <div><%= signal.volumeFootprint.val %></div>
                    </div>
                </div>
                
                <div class="stop-loss-section">
                    <div class="stop-loss-grid">
                        <div class="stop-loss-item">
                            <div class="stop-loss-label">Stop Loss</div>
                            <div class="stop-loss-price"><%= stopLoss.formattedStopLoss %></div>
                        </div>
                        <div class="risk-item">
                            <div class="risk-label">Risk</div>
                            <div class="risk-percentage"><%= stopLoss.formattedRiskPercentage %></div>
                        </div>
                    </div>
                </div>
                
                <div class="signal-time">
                    <div style="margin-bottom: 5px;">
                        📅 Opened: <%= new Date(signal.openTime).toLocaleString() %>
                    </div>
                    <div>
                        🏁 Closed: <%= new Date(signal.closeTime).toLocaleString() %>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>
<% } else if (hasSymbols) { %>
    <div class="empty-state">
        <h3>🔍 No Valid Signals Found</h3>
        <p>Try adjusting your filters or wait for new signals to be generated.<br>
        Signals are updated automatically every minute.</p>
        <button id="refreshBtn2" class="btn btn-primary">🔄 Refresh Now</button>
    </div>
<% } %>

<script>
    function refreshData() {
        location.reload();
    }
    
    // Event listeners
    document.getElementById('refreshBtn').addEventListener('click', refreshData);
    
    // Add event listener for second refresh button if it exists
    const refreshBtn2 = document.getElementById('refreshBtn2');
    if (refreshBtn2) {
        refreshBtn2.addEventListener('click', refreshData);
    }
    
    // Range-based timeframe functionality
    const minTimeframeInput = document.getElementById('minTimeframe');
    const maxTimeframeInput = document.getElementById('maxTimeframe');
    const specificTimeframeInput = document.getElementById('specificTimeframe');
    const rangeDisplay = document.getElementById('rangeDisplay');
    
    function updateRangeDisplay() {
        const minVal = parseInt(minTimeframeInput.value) || 1;
        const maxVal = parseInt(maxTimeframeInput.value) || 60;
        rangeDisplay.textContent = `${minVal}m - ${maxVal}m`;
    }
    
    function validateRangeInputs() {
        const minVal = parseInt(minTimeframeInput.value) || 1;
        const maxVal = parseInt(maxTimeframeInput.value) || 60;
        
        // Ensure min is not greater than max
        if (minVal > maxVal) {
            maxTimeframeInput.value = minVal;
        }
        
        // Ensure values are within bounds
        if (minVal < 1) minTimeframeInput.value = 1;
        if (minVal > 60) minTimeframeInput.value = 60;
        if (maxVal < 1) maxTimeframeInput.value = 1;
        if (maxVal > 60) maxTimeframeInput.value = 60;
        
        updateRangeDisplay();
    }
    
    function submitForm() {
        const form = document.getElementById('signalsForm');
        const formData = new FormData(form);
        const params = new URLSearchParams();
        
        // Handle regular form fields
        ['symbol', 'minScore', 'signalType', 'sortBy'].forEach(key => {
            const value = formData.get(key);
            if (value) params.set(key, value);
        });
        
        // Handle timeframe parameters
        const specificTimeframe = formData.get('specificTimeframe');
        if (specificTimeframe && specificTimeframe.trim() !== '') {
            params.set('specificTimeframe', specificTimeframe);
        } else {
            const minTimeframe = formData.get('minTimeframe');
            const maxTimeframe = formData.get('maxTimeframe');
            if (minTimeframe) params.set('minTimeframe', minTimeframe);
            if (maxTimeframe) params.set('maxTimeframe', maxTimeframe);
        }
        
        window.location.search = params.toString();
    }
    
    // Range input change handlers
    minTimeframeInput.addEventListener('input', validateRangeInputs);
    maxTimeframeInput.addEventListener('input', validateRangeInputs);
    
    minTimeframeInput.addEventListener('change', function() {
        validateRangeInputs();
        submitForm();
    });
    
    maxTimeframeInput.addEventListener('change', function() {
        validateRangeInputs();
        submitForm();
    });
    
    // Specific timeframe input handler
    specificTimeframeInput.addEventListener('change', function() {
        const val = parseInt(this.value);
        if (val && (val < 1 || val > 60)) {
            this.value = Math.max(1, Math.min(60, val));
        }
        submitForm();
    });
    
    // Clear specific timeframe when range inputs are used
    minTimeframeInput.addEventListener('focus', function() {
        specificTimeframeInput.value = '';
    });
    
    maxTimeframeInput.addEventListener('focus', function() {
        specificTimeframeInput.value = '';
    });
    
    // Clear range inputs when specific timeframe is used
    specificTimeframeInput.addEventListener('focus', function() {
        // Don't clear range inputs, just let the backend handle the logic
    });
    
    // Complete system reset functionality
    document.getElementById('resetSymbolsBtn').addEventListener('click', function() {
        if (confirm('⚠️ COMPLETE SYSTEM RESET\\n\\nThis will permanently delete ALL data including:\\n• Selected symbols\\n• Candle data\\n• Trading signals\\n• Volume footprints\\n• All historical data\\n\\nThe system will start completely fresh like a new installation.\\n\\nThis action cannot be undone!\\n\\nAre you sure you want to continue?')) {
            // Show loading state
            this.textContent = 'Resetting System...';
            this.disabled = true;
            
            // Send complete system reset request
            fetch('/system/reset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('✅ ' + data.message + '\\n\\nSystem has been completely reset!\\n\\nRedirecting to symbol selection to start fresh...');
                    window.location.href = '/symbols';
                } else {
                    alert('❌ ' + data.message);
                    // Reset button state
                    this.textContent = '⚠️ Reset System';
                    this.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error resetting system:', error);
                alert('❌ Error resetting system: ' + error.message);
                // Reset button state
                this.textContent = '⚠️ Reset System';
                this.disabled = false;
            });
        }
    });
    
    // Auto-submit form when other filters change
    ['symbol', 'minScore', 'signalType', 'sortBy'].forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', submitForm);
        }
    });
    
    // Signal deletion function
    function deleteSignal(signalId) {
        if (confirm('🗑️ Delete Signal\\n\\nAre you sure you want to delete this signal?\\n\\nThis action cannot be undone.')) {
            // Find the signal card
            const signalCard = document.querySelector('[data-signal-id="' + signalId + '"]');
            if (signalCard) {
                // Add loading state
                signalCard.style.opacity = '0.5';
                signalCard.style.pointerEvents = 'none';
            }
            
            // Send delete request
            fetch('/api/signals/' + signalId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the signal card with animation
                    if (signalCard) {
                        signalCard.style.transform = 'scale(0.8)';
                        signalCard.style.transition = 'all 0.3s ease';
                        setTimeout(() => {
                            signalCard.remove();
                            // Check if no signals left
                            const remainingSignals = document.querySelectorAll('.signal-card').length;
                            if (remainingSignals === 0) {
                                location.reload(); // Refresh to show empty state
                            }
                        }, 300);
                    }
                    
                    // Show success message briefly
                    const successMsg = document.createElement('div');
                    successMsg.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #27ae60; color: white; padding: 15px 20px; border-radius: 10px; z-index: 10000; box-shadow: 0 4px 15px rgba(0,0,0,0.2);';
                    successMsg.textContent = '✅ Signal deleted successfully';
                    document.body.appendChild(successMsg);
                    setTimeout(() => successMsg.remove(), 3000);
                    
                } else {
                    // Restore signal card
                    if (signalCard) {
                        signalCard.style.opacity = '1';
                        signalCard.style.pointerEvents = 'auto';
                    }
                    alert('❌ Failed to delete signal: ' + data.message);
                }
            })
            .catch(error => {
                // Restore signal card
                if (signalCard) {
                    signalCard.style.opacity = '1';
                    signalCard.style.pointerEvents = 'auto';
                }
                console.error('Error deleting signal:', error);
                alert('❌ Error deleting signal: ' + error.message);
            });
        }
    }
    
    // Make deleteSignal function available globally
    window.deleteSignal = deleteSignal;
    
    // Initialize
    updateRangeDisplay();
    validateRangeInputs();
</script>
